@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SunNext.Common
@using static SunNext.Common.GlobalConstants
@using System.Globalization
@model SunNext.Web.ViewModels.Market.TradingTargetsViewModel
@{
    ViewData["Title"] = "Trading Targets";
}
<div class="container-fluid py-5 px-3 px-md-5">
    <div class="page-header">
        <h1 class="page-title">üéØ My Trading Targets</h1>
        <p class="page-subtitle">Set price levels based on IBEX Spot Market</p>
    </div>

    <form method="get" class="mb-3">
        <div class="row g-3 align-items-end">
            <div class="col-auto">
                <label for="dateFilter" class="form-label text-light">Date:</label>
            </div>
            <div class="col-auto">
                <input type="date" id="dateFilter" name="filterDate" class="form-control"
                       value="@(Model.FilterDate?.ToString("yyyy-MM-dd"))" />

            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-outline-light">Search</button>
            </div>
        </div>
    </form>

    @{
        var filterDateQuery = Context.Request.Query["filterDate"].FirstOrDefault();
        var userEnteredDate = !string.IsNullOrEmpty(filterDateQuery);

        DateTime? parsedQueryDate = null;
        if (userEnteredDate)
        {
            if (DateTime.TryParseExact(filterDateQuery, "yyyy-MM-dd",
                    CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result))
            {
                parsedQueryDate = result;
            }
            else
            {
                if (DateTime.TryParse(filterDateQuery, CultureInfo.InvariantCulture,
                        DateTimeStyles.None, out DateTime fallbackResult))
                {
                    parsedQueryDate = fallbackResult;
                }
            }
        }
    }

    @if (userEnteredDate && parsedQueryDate.HasValue && Model.FilterDate.HasValue && parsedQueryDate.Value.Date != Model.FilterDate.Value.Date)
    {
        <div class="alert alert-warning fade-in mb-4">
            ‚ö†Ô∏è No data found for <strong>@parsedQueryDate.Value.ToString(dateFormat)</strong>. Showing last available data for:
            <strong>@Model.FilterDate.Value.ToString(dateFormat)</strong>.
        </div>
    }


    <div class="dark-card mb-5 p-3 p-md-4 fade-in">
        <h4 class="section-title">üìà IBEX Spot Market Prices (BGN/MWh)</h4>
        <div class="chart-container">
            <canvas id="ibexPriceChart"></canvas>
        </div>
        <div class="chart-hint">üí° Click a point to assign it to your price targets</div>
    </div>

    <div class="dark-card fade-in">
        <form method="post">
            <div class="table-responsive">
                <table class="table table-dark table-hover align-middle mb-0">
                    <thead>
                    <tr>
                        <th>Asset <i class="bi bi-info-circle tooltip-icon" data-bs-toggle="tooltip" title="Your solar system or trading unit"></i></th>
                        <th>Suggested Sell <i class="bi bi-info-circle tooltip-icon" data-bs-toggle="tooltip" title="AI-based suggestion for optimal sell price"></i></th>
                        <th>Your Sell <i class="bi bi-info-circle tooltip-icon" data-bs-toggle="tooltip" title="Your preferred price to sell energy"></i></th>
                        <th>Suggested Stop <i class="bi bi-info-circle tooltip-icon" data-bs-toggle="tooltip" title="AI-suggested minimum acceptable price"></i></th>
                        <th>Your Stop <i class="bi bi-info-circle tooltip-icon" data-bs-toggle="tooltip" title="Price where you'd stop selling to avoid loss"></i></th>
                        <th>Status <i class="bi bi-info-circle tooltip-icon" data-bs-toggle="tooltip" title="Whether AI is assisting or manual mode is on"></i></th>
                        <th>Save <i class="bi bi-info-circle tooltip-icon" data-bs-toggle="tooltip" title="Click to store your custom target"></i></th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td><strong>South PV Field</strong></td>
                        <td>210.00 BGN</td>
                        <td><input type="number" step="0.01" name="UserSellTargets[0]" class="form-control form-control-sm" value="210.00" /></td>
                        <td>190.00 BGN</td>
                        <td><input type="number" step="0.01" name="UserStopTargets[0]" class="form-control form-control-sm" value="190.00" /></td>
                        <td><span class="badge bg-info">Using AI</span></td>
                        <td><button type="submit" class="btn btn-outline-success btn-sm"><i class="bi bi-floppy"></i></button></td>
                    </tr>
                    <tr>
                        <td><strong>North Solar Array</strong></td>
                        <td>205.50 BGN</td>
                        <td><input type="number" step="0.01" name="UserSellTargets[1]" class="form-control form-control-sm" value="205.50" /></td>
                        <td>185.00 BGN</td>
                        <td><input type="number" step="0.01" name="UserStopTargets[1]" class="form-control form-control-sm" value="185.00" /></td>
                        <td><span class="badge bg-info">Using AI</span></td>
                        <td><button type="submit" class="btn btn-outline-success btn-sm"><i class="bi bi-floppy"></i></button></td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </form>
    </div>
</div>

<div class="modal fade" id="priceModal" tabindex="-1" aria-labelledby="priceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="priceModalLabel">Assign Price</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="mb-4">You clicked on price:</p>
                <div class="price-highlight mb-4" id="clickedPriceText">---</div>
                <div class="d-grid gap-2 d-md-flex justify-content-md-center">
                    <button id="setTargetBtn" type="button" class="btn btn-target">
                        üéØ Set as Target Sell
                    </button>
                    <button id="setStopBtn" type="button" class="btn btn-stop">
                        üö© Set as Stop Price
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => new bootstrap.Tooltip(el));

        let clickedPrice = null;
        const ibexCtx = document.getElementById('ibexPriceChart');
        const targetInput = document.querySelector("input[name='UserSellTargets[0]']");
        const stopInput = document.querySelector("input[name='UserStopTargets[0]']");
        const priceModal = new bootstrap.Modal(document.getElementById('priceModal'));
        const clickedPriceText = document.getElementById("clickedPriceText");

        document.getElementById("setTargetBtn").addEventListener("click", () => {
            if (clickedPrice && targetInput) {
                targetInput.value = clickedPrice.toFixed(2);
                targetInput.classList.add("border-success", "fw-bold");
                priceModal.hide();
            }
        });

        document.getElementById("setStopBtn").addEventListener("click", () => {
            if (clickedPrice && stopInput) {
                stopInput.value = clickedPrice.toFixed(2);
                stopInput.classList.add("border-danger", "fw-bold");
                priceModal.hide();
            }
        });

        const chartLabels = @Html.Raw(Json.Serialize(Model.MarketPrices.Select(p => $"{p.Hour.ToString("00")}:00")));
        const chartData = @Html.Raw(Json.Serialize(Model.MarketPrices.Select(p => p.Price)));

        new Chart(ibexCtx, {
            type: 'line',
            data: {
                labels: chartLabels,
                datasets: [{
                    label: 'IBEX Spot Price (BGN/MWh)',
                    data: chartData,
                    fill: true,
                    tension: 0.3,
                    borderColor: 'rgba(0, 188, 255, 1)',
                    backgroundColor: 'rgba(0, 188, 255, 0.2)',
                    pointRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                onClick: (evt, elements) => {
                    if (elements.length > 0) {
                        const index = elements[0].index;
                        clickedPrice = evt.chart.data.datasets[0].data[index];
                        clickedPriceText.innerText = clickedPrice.toFixed(2);
                        priceModal.show();
                    }
                },
                scales: {
                    y: {
                        ticks: { color: "#ccc" },
                        title: { display: true, text: 'Price (BGN/MWh)', color: "#ccc" }
                    },
                    x: {
                        ticks: { color: "#ccc" },
                        title: { display: true, text: 'Hour', color: "#ccc" }
                    }
                },
                plugins: {
                    legend: { labels: { color: "#ccc" } },
                    tooltip: {
                        callbacks: {
                            label: ctx => `${ctx.parsed.y} BGN/MWh`
                        }
                    }
                }
            }
        });
    </script>
}