@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SunNext.Common
@using static SunNext.Common.GlobalConstants
@using System.Globalization
@model SunNext.Web.ViewModels.Market.TradingTargetsViewModel
@{
    ViewData["Title"] = "Trading Targets";
}
<div class="container-fluid py-5 px-3 px-md-5">
    <div class="page-header">
        <h1 class="page-title">üéØ My Trading Targets</h1>
        <p class="page-subtitle">Set price levels based on IBEX Spot Market</p>
    </div>

    <form method="get" class="mb-3">
        <div class="row g-3 align-items-end">
            <div class="col-auto">
                <label for="dateFilter" class="form-label text-light">Date:</label>
            </div>
            <div class="col-auto">
                <input type="date" id="dateFilter" name="filterDate" class="form-control"
                       value="@(Model.FilterDate?.ToString("yyyy-MM-dd"))" />

            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-outline-light">Search</button>
            </div>
        </div>
    </form>

    @{
        var filterDateQuery = Context.Request.Query["filterDate"].FirstOrDefault();
        var userEnteredDate = !string.IsNullOrEmpty(filterDateQuery);

        DateTime? parsedQueryDate = null;
        if (userEnteredDate)
        {
            if (DateTime.TryParseExact(filterDateQuery, "yyyy-MM-dd",
                    CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result))
            {
                parsedQueryDate = result;
            }
            else
            {
                if (DateTime.TryParse(filterDateQuery, CultureInfo.InvariantCulture,
                        DateTimeStyles.None, out DateTime fallbackResult))
                {
                    parsedQueryDate = fallbackResult;
                }
            }
        }
    }

    @if (userEnteredDate && parsedQueryDate.HasValue && Model.FilterDate.HasValue && parsedQueryDate.Value.Date != Model.FilterDate.Value.Date)
    {
        <div class="alert alert-warning fade-in mb-4">
            ‚ö†Ô∏è No data found for <strong>@parsedQueryDate.Value.ToString(dateFormat)</strong>. Showing last available data for:
            <strong>@Model.FilterDate.Value.ToString(dateFormat)</strong>.
        </div>
    }


    <div class="dark-card mb-5 p-3 p-md-4 fade-in">
        <div class="d-flex flex-wrap justify-content-between align-items-center gap-3 mb-3">
            <h4 class="section-title mb-0">
                üìà IBEX Spot Market Prices (BGN/MWh)
                <i class="bi bi-info-circle tooltip-icon ms-1" data-bs-toggle="tooltip"
                   title="IBEX (Independent Bulgarian Energy Exchange) is the national electricity trading platform in Bulgaria, operating the day-ahead and intraday markets."></i>
            </h4>

            <h4 class="section-title mb-0">
                CET time zone
                <i class="bi bi-info-circle tooltip-icon ms-1" data-bs-toggle="tooltip"
                   title="All times follow CET (Central European Time), the standard used in the European electricity markets including IBEX."></i>
            </h4>

            <h4 class="section-title mb-0 text-center w-100 w-md-auto">
                Segment Day Ahead
                <i class="bi bi-info-circle tooltip-icon ms-1" data-bs-toggle="tooltip"
                   title="The Day-Ahead segment is a market where electricity prices for each hour of the next day are formed based on the intersection of aggregated supply and demand curves."></i>
            </h4>
        </div>

        <div class="chart-container">
            <canvas id="ibexPriceChart"></canvas>
        </div>
        <div class="chart-hint">üí° Click a point to assign it to your price targets or open the Trade Position modal.</div>
    </div>

    <div class="d-flex justify-content-end mb-4">
        <button class="btn btn-outline-info" id="openTradePositionBtn">
            ‚ûï Add Trade Position
        </button>
    </div>
    @await Html.PartialAsync("_TradePositionModal", Model.TradePositionInput)
    @await Html.PartialAsync("_TradeTargetsTable")
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => new bootstrap.Tooltip(el));

        let chartInstance = null;
        let modalInstance = null;
        let isFirstClick = true;
        let tempStartHour = null;

        function showTradeModal() {
            if (!modalInstance) {
                modalInstance = new bootstrap.Modal(document.getElementById("tradePositionModal"));
            }
            modalInstance.show();
        }

        function openStartTradeFromChart(hour) {
            document.querySelector("input[name='StartHour']").value = hour;
            document.querySelector("input[name='EndHour']").value = '';

            document.querySelector(".optional-trade-fields")?.style?.setProperty("display", "none");
            document.getElementById("continueTradeBtn")?.classList.remove("d-none");
            document.getElementById("saveTradeBtn")?.classList.add("d-none");

            showTradeModal();
        }

        function openCompleteTradeModal(startHour, endHour) {
            document.querySelector("input[name='StartHour']").value = Math.min(startHour, endHour);
            document.querySelector("input[name='EndHour']").value = Math.max(startHour, endHour);

            document.querySelector(".optional-trade-fields")?.style?.setProperty("display", "block");
            document.getElementById("continueTradeBtn")?.classList.add("d-none");
            document.getElementById("saveTradeBtn")?.classList.remove("d-none");

            showTradeModal();
        }

        // Manual button logic
        document.getElementById("openTradePositionBtn")?.addEventListener("click", () => {
            isFirstClick = true;
            tempStartHour = null;

            document.querySelector("input[name='StartHour']").value = '';
            document.querySelector("input[name='EndHour']").value = '';
            document.querySelector(".optional-trade-fields")?.style?.setProperty("display", "block");

            document.getElementById("continueTradeBtn")?.classList.add("d-none");
            document.getElementById("saveTradeBtn")?.classList.remove("d-none");

            showTradeModal();
        });

        // Continue button in modal
        document.getElementById("continueTradeBtn")?.addEventListener("click", () => {
            modalInstance.hide(); // Hide modal and wait for 2nd click
            isFirstClick = false;
        });

        const ibexCtx = document.getElementById('ibexPriceChart');

        const chartLabels = @Html.Raw(Json.Serialize(Model.MarketPrices.Select(p => $"{p.Hour:00}:00")));
        const chartData = @Html.Raw(Json.Serialize(Model.MarketPrices.Select(p => p.Price)));

        chartInstance = new Chart(ibexCtx, {
            type: 'line',
            data: {
                labels: chartLabels,
                datasets: [{
                    label: 'IBEX Spot Price (BGN/MWh)',
                    data: chartData,
                    fill: true,
                    tension: 0.3,
                    borderColor: 'rgba(0, 188, 255, 1)',
                    backgroundColor: 'rgba(0, 188, 255, 0.2)',
                    pointRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                onClick: function (evt, elements) {
                    if (elements.length > 0) {
                        const index = elements[0].index;
                        const hour = index + 1;

                        if (isFirstClick) {
                            tempStartHour = hour;
                            openStartTradeFromChart(hour);
                        } else {
                            openCompleteTradeModal(tempStartHour, hour);
                            isFirstClick = true;
                            tempStartHour = null;
                        }
                    }
                },
                scales: {
                    y: {
                        ticks: { color: "#ccc" },
                        title: { display: true, text: 'Price (BGN/MWh)', color: "#ccc" }
                    },
                    x: {
                        ticks: { color: "#ccc" },
                        title: { display: true, text: 'Hour', color: "#ccc" }
                    }
                },
                plugins: {
                    legend: { labels: { color: "#ccc" } },
                    tooltip: {
                        callbacks: {
                            label: ctx => `${ctx.parsed.y} BGN/MWh`
                        }
                    }
                }
            }
        });
    </script>
}

