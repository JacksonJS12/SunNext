@using Microsoft.AspNetCore.Mvc.TagHelpers
@model SunNext.Web.ViewModels.SolarAssets.SolarAssetFormModel


<style>
    body {
        background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
        color: #ffffff;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
    }

    .page-header {
        padding: 2rem 0;
        text-align: center;
        margin-bottom: 2rem;
    }

    .form-title {
        font-size: 2.2rem;
        font-weight: 300;
        margin-bottom: 0.5rem;
        color: #ffffff;
    }

    .form-subtitle {
        color: #888;
        font-size: 1rem;
    }

    .dark-card {
        background: rgba(0, 0, 0, 0.4);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        backdrop-filter: blur(10px);
        padding: 2rem;
        margin-bottom: 2rem;
        transition: all 0.3s ease;
    }

    .dark-card:hover {
        background: rgba(0, 0, 0, 0.5);
        border-color: rgba(255, 255, 255, 0.2);
    }

    .section-title {
        font-size: 1.1rem;
        font-weight: 400;
        color: #ffffff;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .form-label {
        color: #aaa;
        font-weight: 400;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-control, .form-select {
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 6px;
        color: #ffffff;
        padding: 0.75rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        background: rgba(0, 0, 0, 0.4);
        border-color: rgba(255, 255, 255, 0.4);
        color: #ffffff;
        box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.1);
    }

    .form-control::placeholder {
        color: #666;
    }

    .form-select option {
        background: #1a1a2e;
        color: #ffffff;
    }

    .form-text {
        color: #666;
        font-size: 0.8rem;
    }

    .btn-success {
        background: rgba(34, 197, 94, 0.2);
        border: 1px solid rgba(34, 197, 94, 0.5);
        color: #22c55e;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-success:hover {
        background: rgba(34, 197, 94, 0.3);
        border-color: #22c55e;
        color: #ffffff;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #aaa;
        font-weight: 400;
        transition: all 0.3s ease;
    }

    .btn-secondary:hover {
        background: rgba(0, 0, 0, 0.4);
        border-color: rgba(255, 255, 255, 0.3);
        color: #ffffff;
        transform: translateY(-1px);
    }

    .fade-in {
        animation: fadeIn 0.6s ease-out forwards;
        opacity: 0;
    }

    .fade-in:nth-child(1) { animation-delay: 0.1s; }
    .fade-in:nth-child(2) { animation-delay: 0.2s; }
    .fade-in:nth-child(3) { animation-delay: 0.3s; }
    .fade-in:nth-child(4) { animation-delay: 0.4s; }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .form-control.is-invalid,
    .form-select.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        background: rgba(220, 53, 69, 0.1);
    }

    .form-control.is-valid,
    .form-select.is-valid {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
        background: rgba(25, 135, 84, 0.1);
    }

    .form-check-input.is-invalid {
        border-color: #dc3545;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }

    .form-check-input.is-valid {
        border-color: #198754;
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }

    .text-danger {
        color: #dc3545 !important;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .tooltip-inner {
        background-color: rgba(0, 0, 0, 0.9);
        color: #ffffff;
        border-radius: 6px;
        max-width: 250px;
        text-align: left;
    }

    .tooltip.bs-tooltip-top .tooltip-arrow::before {
        border-top-color: rgba(0, 0, 0, 0.9);
    }

    .validation-summary-errors {
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .validation-summary-errors ul {
        margin: 0.5rem 0 0 0;
        padding-left: 1.5rem;
    }

    .validation-summary-errors li {
        color: #dc3545;
        margin-bottom: 0.25rem;
    }

    .invalid-feedback {
        display: block !important;
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-control:focus,
    .form-select:focus {
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.25);
    }

    .form-control:focus.is-invalid,
    .form-select:focus.is-invalid {
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }

    .form-control:focus.is-valid,
    .form-select:focus.is-valid {
        box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
    }
</style>

<div class="container py-4">
    <!-- Validation Summary -->
    @if (!ViewData.ModelState.IsValid)
    {
        <div class="validation-summary-errors alert alert-danger" role="alert">
            <h6><i class="bi bi-exclamation-triangle-fill me-2"></i>Please correct the following errors:</h6>
            <asp:validation-summary />
        </div>
    }

    <form method="post">
        <div class="dark-card fade-in">
            <h5 class="section-title">Basic Information</h5>
            <div class="row g-3 mb-4">
                <div class="col-md-6">
                    <label asp-for="Name" class="form-label">
                        Asset Name <span class="text-danger">*</span>
                        <i class="bi bi-info-circle-fill ms-1" title="The name of the solar asset for identification (e.g., North-East PV Cluster)."></i>
                    </label>
                    <input asp-for="Name" class="form-control @(Html.ViewData.ModelState["Name"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. North-East PV Cluster" required maxlength="100" />
                    <span asp-validation-for="Name" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="Type" class="form-label">
                        System Type <span class="text-danger">*</span>
                        <i class="bi bi-info-circle-fill ms-1" title="Defines the system type: GridTied (no battery), OffGrid (with battery), or Hybrid."></i>
                    </label>
                    <select asp-for="Type" class="form-select @(Html.ViewData.ModelState["Type"]?.Errors.Count > 0 ? "is-invalid" : "")" required>
                        <option value="" disabled selected>-- Select Type --</option>
                        <option value="GridTied">GridTied</option>
                        <option value="OffGrid">OffGrid</option>
                        <option value="Hybrid">Hybrid</option>
                    </select>
                    <span asp-validation-for="Type" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <label class="form-label">
                        Is it Online
                        <i class="bi bi-info-circle-fill ms-1" title="Indicates if the system is online/offline."></i>
                    </label><br />
                    <input asp-for="IsOnline" type="checkbox" class="form-check-input" />
                    <span asp-validation-for="IsOnline" class="invalid-feedback d-block"></span>
                </div>
            </div>
        </div>

        <div class="dark-card fade-in">
            <h5 class="section-title">Technical Specifications</h5>
            <div class="row g-3 mb-4">
                <div class="col-md-4">
                    <label asp-for="PowerKw" class="form-label">
                        Max Output Power (kW) <span class="text-danger">*</span>
                        <i class="bi bi-info-circle-fill ms-1" title="Maximum power output at any given time, in kilowatts (kW)."></i>
                    </label>
                    <input asp-for="PowerKw" class="form-control @(Html.ViewData.ModelState["PowerKw"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 50.0" type="number" step="0.01" min="0.01" required />
                    <span asp-validation-for="PowerKw" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="CapacityKw" class="form-label">
                        Installed Capacity (kWp) <span class="text-danger">*</span>
                        <i class="bi bi-info-circle-fill ms-1" title="Installed peak power capacity under ideal conditions, in kWp."></i>
                    </label>
                    <input asp-for="CapacityKw" class="form-control @(Html.ViewData.ModelState["CapacityKw"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 60.0" type="number" step="0.01" min="0.01" required />
                    <span asp-validation-for="CapacityKw" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="EfficiencyPercent" class="form-label">
                        System Efficiency (%) <span class="text-danger">*</span>
                        <i class="bi bi-info-circle-fill ms-1" title="Percentage of how efficiently the system converts sunlight to energy."></i>
                    </label>
                    <input asp-for="EfficiencyPercent" class="form-control @(Html.ViewData.ModelState["EfficiencyPercent"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 97.5" type="number" step="0.01" min="0.01" max="100" required />
                    <span asp-validation-for="EfficiencyPercent" class="invalid-feedback d-block"></span>
                </div>
            </div>
        </div>

        <div class="dark-card fade-in">
            <h5 class="section-title">Energy Monitoring</h5>
            <div class="row g-3 mb-4">
                <div class="col-md-3">
                    <label asp-for="EnergyTodayKWh" class="form-label">
                        Today (kWh)
                        <i class="bi bi-info-circle-fill ms-1" title="Energy generated today, in kilowatt-hours (kWh)."></i>
                    </label>
                    <input asp-for="EnergyTodayKWh" class="form-control @(Html.ViewData.ModelState["EnergyTodayKWh"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 35.4" type="number" step="0.01" min="0" />
                    <span asp-validation-for="EnergyTodayKWh" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="EnergyMonthKWh" class="form-label">
                        This Month (kWh)
                        <i class="bi bi-info-circle-fill ms-1" title="Cumulative energy generated this month (kWh)."></i>
                    </label>
                    <input asp-for="EnergyMonthKWh" class="form-control @(Html.ViewData.ModelState["EnergyMonthKWh"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 800.0" type="number" step="0.01" min="0" />
                    <span asp-validation-for="EnergyMonthKWh" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="EnergyYearKWh" class="form-label">
                        This Year (kWh)
                        <i class="bi bi-info-circle-fill ms-1" title="Energy produced during the current year (kWh)."></i>
                    </label>
                    <input asp-for="EnergyYearKWh" class="form-control @(Html.ViewData.ModelState["EnergyYearKWh"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 10200.0" type="number" step="0.01" min="0" />
                    <span asp-validation-for="EnergyYearKWh" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="EnergyTotalKWh" class="form-label">
                        Total (kWh)
                        <i class="bi bi-info-circle-fill ms-1" title="Total lifetime energy production (kWh)."></i>
                    </label>
                    <input asp-for="EnergyTotalKWh" class="form-control @(Html.ViewData.ModelState["EnergyTotalKWh"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 40500.0" type="number" step="0.01" min="0" />
                    <span asp-validation-for="EnergyTotalKWh" class="invalid-feedback d-block"></span>
                </div>
            </div>
        </div>

        <div class="dark-card fade-in">
            <h5 class="section-title">Usage & Needs</h5>
            <div class="row g-3 mb-4">
                <div class="col-md-4">
                    <label asp-for="DailyEnergyNeedKWh" class="form-label">
                        Avg. Daily Energy Need (kWh)
                        <i class="bi bi-info-circle-fill ms-1" title="Average daily energy consumption (kWh). Leave blank to auto-calculate."></i>
                    </label>
                    <input asp-for="DailyEnergyNeedKWh" class="form-control @(Html.ViewData.ModelState["DailyEnergyNeedKWh"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 120.0" type="number" step="0.01" min="0" />
                    <span asp-validation-for="DailyEnergyNeedKWh" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="LocalReservePercent" class="form-label">
                        Local Reserve (%)
                        <i class="bi bi-info-circle-fill ms-1" title="Percentage of energy reserved for local (on-site) use."></i>
                    </label>
                    <input asp-for="LocalReservePercent" class="form-control @(Html.ViewData.ModelState["LocalReservePercent"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="e.g. 30" type="number" step="0.01" min="0" max="100" />
                    <span asp-validation-for="LocalReservePercent" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label">
                                Can Sell to Market
                                <i class="bi bi-info-circle-fill ms-1" title="Indicates whether the system can export energy to the grid."></i>
                            </label><br />
                            <input asp-for="CanSellToMarket" type="checkbox" class="form-check-input" />
                            <span asp-validation-for="CanSellToMarket" class="invalid-feedback d-block"></span>
                        </div>
                        <div class="col-6">
                            <label class="form-label">
                                Self-Consumption Only
                                <i class="bi bi-info-circle-fill ms-1" title="Limits usage to only local consumption, no grid export."></i>
                            </label><br />
                            <input asp-for="SelfConsumptionOnly" type="checkbox" class="form-check-input" />
                            <span asp-validation-for="SelfConsumptionOnly" class="invalid-feedback d-block"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="dark-card fade-in">
            <h5 class="section-title">Installation & Ownership</h5>
            <div class="row g-3 mb-4">
                <div class="col-md-6">
                    <label asp-for="CommissioningDate" class="form-label">
                        Commissioning Date
                        <i class="bi bi-info-circle-fill ms-1" title="The official date the solar asset was commissioned."></i>
                    </label>
                    <input asp-for="CommissioningDate" type="date"
                           class="form-control @(Html.ViewData.ModelState["CommissioningDate"]?.Errors.Count > 0 ? "is-invalid" : "")" />
                    <span asp-validation-for="CommissioningDate" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="TimeZone" class="form-label">
                        Time Zone
                        <i class="bi bi-info-circle-fill ms-1" title="The time zone of the installation location (e.g. Europe/Sofia)."></i>
                    </label>
                    <input asp-for="TimeZone" class="form-control @(Html.ViewData.ModelState["TimeZone"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="Europe/Sofia" maxlength="50" />
                    <span asp-validation-for="TimeZone" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="InstallerName" class="form-label">
                        Installer Name
                        <i class="bi bi-info-circle-fill ms-1" title="Full name of the installation technician or company."></i>
                    </label>
                    <input asp-for="InstallerName" class="form-control @(Html.ViewData.ModelState["InstallerName"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           maxlength="100" />
                    <span asp-validation-for="InstallerName" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="InstallerEmail" class="form-label">
                        Installer Email
                        <i class="bi bi-info-circle-fill ms-1" title="Contact email for the installer."></i>
                    </label>
                    <input asp-for="InstallerEmail" class="form-control @(Html.ViewData.ModelState["InstallerEmail"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           type="email" maxlength="100" />
                    <span asp-validation-for="InstallerEmail" class="invalid-feedback d-block"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="InstallerPhone" class="form-label">
                        Installer Phone
                        <i class="bi bi-info-circle-fill ms-1" title="Phone number for the installer."></i>
                    </label>
                    <input asp-for="InstallerPhone" class="form-control @(Html.ViewData.ModelState["InstallerPhone"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           type="tel" maxlength="20" />
                    <span asp-validation-for="InstallerPhone" class="invalid-feedback d-block"></span>
                </div>
            </div>
        </div>

        <div class="dark-card fade-in">
            <h5 class="section-title">Address & Media</h5>
            <div class="mb-3">
                <label asp-for="Address" class="form-label">
                    Installation Address
                    <i class="bi bi-info-circle-fill ms-1" title="Physical address where the system is installed."></i>
                </label>
                <input asp-for="Address" class="form-control @(Html.ViewData.ModelState["Address"]?.Errors.Count > 0 ? "is-invalid" : "")"
                       placeholder="e.g. Main St 12, Plovdiv, Bulgaria" maxlength="200" />
                <span asp-validation-for="Address" class="invalid-feedback d-block"></span>
            </div>
            <div class="mb-4">
                <label asp-for="ImageUrl" class="form-label">
                    Asset Image URL
                    <i class="bi bi-info-circle-fill ms-1" title="Direct URL to an image representing the solar asset."></i>
                </label>
                <input asp-for="ImageUrl" class="form-control @(Html.ViewData.ModelState["ImageUrl"]?.Errors.Count > 0 ? "is-invalid" : "")"
                       placeholder="https://example.com/pv-image.jpg" type="url" maxlength="500" />
                <span asp-validation-for="ImageUrl" class="invalid-feedback d-block"></span>
            </div>
        </div>

        <input type="hidden" asp-for="OwnerId" value="@Model.OwnerId" />
        <input type="hidden" asp-for="Id" />

        <div class="d-flex justify-content-between mt-4">
            <button type="submit" class="btn btn-success rounded-pill px-4">
                <i class="bi bi-check-circle me-2"></i>Save Asset
            </button>
            <a asp-action="All" class="btn btn-secondary rounded-pill px-4">
                <i class="bi bi-x-circle me-2"></i>Cancel
            </a>
        </div>
    </form>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize Bootstrap tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Configure Toastr options
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

        // Display TempData messages with Toastr
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
            toastr.success('@Html.Raw(TempData["SuccessMessage"])');
            </text>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <text>
            toastr.error('@Html.Raw(TempData["ErrorMessage"])');
            </text>
        }

        @if (TempData["WarningMessage"] != null)
        {
            <text>
            toastr.warning('@Html.Raw(TempData["WarningMessage"])');
            </text>
        }

        @if (TempData["InfoMessage"] != null)
        {
            <text>
            toastr.info('@Html.Raw(TempData["InfoMessage"])');
            </text>
        }

        // Form validation and submission
        const form = document.querySelector('form');
        const submitButton = document.querySelector('button[type="submit"]');
        
        if (form && submitButton) {
            // Client-side validation before submission
            form.addEventListener('submit', function(e) {
                // Clear previous validation states
                document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
                document.querySelectorAll('.is-valid').forEach(el => el.classList.remove('is-valid'));

                let isValid = true;
                const errors = [];

                // Validate required fields
                const requiredFields = form.querySelectorAll('[required]');
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        field.classList.add('is-invalid');
                        isValid = false;
                        errors.push(`${field.previousElementSibling.textContent.replace('*', '').trim()} is required`);
                    } else {
                        field.classList.add('is-valid');
                    }
                });

                // Business logic validation
                const powerKw = parseFloat(document.querySelector('[name="PowerKw"]').value) || 0;
                const capacityKw = parseFloat(document.querySelector('[name="CapacityKw"]').value) || 0;
                const efficiency = parseFloat(document.querySelector('[name="EfficiencyPercent"]').value) || 0;
                
                const energyToday = parseFloat(document.querySelector('[name="EnergyTodayKWh"]').value) || 0;
                const energyMonth = parseFloat(document.querySelector('[name="EnergyMonthKWh"]').value) || 0;
                const energyYear = parseFloat(document.querySelector('[name="EnergyYearKWh"]').value) || 0;
                const energyTotal = parseFloat(document.querySelector('[name="EnergyTotalKWh"]').value) || 0;

                const commissioningDate = new Date(document.querySelector('[name="CommissioningDate"]').value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const canSellToMarket = document.querySelector('[name="CanSellToMarket"]').checked;
                const selfConsumptionOnly = document.querySelector('[name="SelfConsumptionOnly"]').checked;

                // Validate power vs capacity
                if (powerKw > capacityKw && powerKw > 0 && capacityKw > 0) {
                    document.querySelector('[name="PowerKw"]').classList.add('is-invalid');
                    isValid = false;
                    errors.push('Max output power cannot be greater than installed capacity');
                }

                // Validate commissioning date
                if (commissioningDate > today) {
                    document.querySelector('[name="CommissioningDate"]').classList.add('is-invalid');
                    isValid = false;
                    errors.push('Commissioning date cannot be in the future');
                }

                // Validate energy values consistency
                if (energyToday > energyMonth && energyToday > 0 && energyMonth > 0) {
                    document.querySelector('[name="EnergyTodayKWh"]').classList.add('is-invalid');
                    isValid = false;
                    errors.push("Today's energy cannot be greater than this month's energy");
                }

                if (energyMonth > energyYear && energyMonth > 0 && energyYear > 0) {
                    document.querySelector('[name="EnergyMonthKWh"]').classList.add('is-invalid');
                    isValid = false;
                    errors.push("This month's energy cannot be greater than this year's energy");
                }

                if (energyYear > energyTotal && energyYear > 0 && energyTotal > 0) {
                    document.querySelector('[name="EnergyYearKWh"]').classList.add('is-invalid');
                    isValid = false;
                    errors.push("This year's energy cannot be greater than total energy");
                }

                // Validate conflicting settings
                if (canSellToMarket && selfConsumptionOnly) {
                    document.querySelector('[name="CanSellToMarket"]').classList.add('is-invalid');
                    document.querySelector('[name="SelfConsumptionOnly"]').classList.add('is-invalid');
                    isValid = false;
                    errors.push("Cannot have both 'Can Sell to Market' and 'Self-Consumption Only' enabled");
                }

                // Validate efficiency
                if (efficiency < 10 && efficiency > 0) {
                    document.querySelector('[name="EfficiencyPercent"]').classList.add('is-invalid');
                    isValid = false;
                    errors.push('System efficiency seems unusually low. Please verify the value');
                }

                // If validation fails, prevent submission and show errors
                if (!isValid) {
                    e.preventDefault();
                    
                    // Show error summary
                    if (errors.length > 0) {
                        const errorMessage = errors.length === 1 
                            ? errors[0] 
                            : `Please fix the following ${errors.length} errors:<br/>• ${errors.join('<br/>• ')}`;
                        
                        toastr.error(errorMessage, 'Validation Error');
                    }
                    return false;
                }

                // If validation passes, show loading state
                const originalText = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Creating Asset...';

                // Re-enable button after timeout as fallback
                setTimeout(() => {
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }, 10000);
            });

            // Real-time validation feedback
            const inputs = form.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                input.addEventListener('blur', function() {
                    if (this.hasAttribute('required') && !this.value.trim()) {
                        this.classList.add('is-invalid');
                        this.classList.remove('is-valid');
                    } else if (this.value.trim()) {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });

                input.addEventListener('input', function() {
                    if (this.classList.contains('is-invalid') && this.value.trim()) {
                        this.classList.remove('is-invalid');
                        this.classList.add('is-valid');
                    }
                });
            });
        }

        // Fade in animations
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, { threshold: 0.1 });

        document.querySelectorAll('.fade-in').forEach(el => {
            observer.observe(el);
        });

        // Auto-calculate daily energy need when capacity or efficiency changes
        const capacityInput = document.querySelector('[name="CapacityKw"]');
        const efficiencyInput = document.querySelector('[name="EfficiencyPercent"]');
        const dailyNeedInput = document.querySelector('[name="DailyEnergyNeedKWh"]');

        function calculateDailyNeed() {
            const capacity = parseFloat(capacityInput.value) || 0;
            const efficiency = parseFloat(efficiencyInput.value) || 0;
            
            if (capacity > 0 && efficiency > 0 && (!dailyNeedInput.value || dailyNeedInput.value == 0)) {
                const avgSunHours = 4.5;
                const calculatedNeed = Math.round(capacity * avgSunHours * (efficiency / 100) * 100) / 100;
                dailyNeedInput.value = calculatedNeed;
                
                // Show info tooltip
                toastr.info(`Daily energy need auto-calculated: ${calculatedNeed} kWh`, 'Auto Calculation');
            }
        }

        if (capacityInput && efficiencyInput && dailyNeedInput) {
            capacityInput.addEventListener('change', calculateDailyNeed);
            efficiencyInput.addEventListener('change', calculateDailyNeed);
        }
    });
    
</script>