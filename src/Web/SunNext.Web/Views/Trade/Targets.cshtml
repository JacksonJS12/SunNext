@{
    ViewData["Title"] = "Trading Targets";
}

<div class="container-fluid py-5 px-3 px-md-5">
    <div class="text-center mb-5">
        <h2 class="glow-text">ðŸŽ¯ My Trading Targets</h2>
        <p class="text-muted">Set price levels based on IBEX Spot Market</p>
    </div>

    <div class="glass-card mb-5 p-3 p-md-4">
        <h4 class="text-info mb-3">ðŸ“ˆ IBEX Spot Market Prices (BGN/MWh)</h4>
        <div class="chart-container" style="position: relative; height: 300px; width: 100%;">
            <canvas id="ibexPriceChart"></canvas>
        </div>
        <small class="text-muted d-block mt-3">ðŸ’¡ Click a point to assign it to your price targets.</small>
    </div>

    <form method="post">
        <div class="glass-card table-responsive-lg">
            <table class="table table-dark table-hover align-middle mb-0">
                <thead class="table-light text-dark">
                <tr>
                    <th>Asset <i class="bi bi-info-circle ms-1 text-info" data-bs-toggle="tooltip" title="Your solar system or trading unit."></i></th>
                    <th>Suggested Sell <i class="bi bi-info-circle ms-1 text-info" data-bs-toggle="tooltip" title="AI-based suggestion for optimal sell price."></i></th>
                    <th>Your Sell <i class="bi bi-info-circle ms-1 text-info" data-bs-toggle="tooltip" title="Your preferred price to sell energy."></i></th>
                    <th>Suggested Stop <i class="bi bi-info-circle ms-1 text-info" data-bs-toggle="tooltip" title="AI-suggested minimum acceptable price."></i></th>
                    <th>Your Stop <i class="bi bi-info-circle ms-1 text-info" data-bs-toggle="tooltip" title="Price where you'd stop selling to avoid loss."></i></th>
                    <th>Status <i class="bi bi-info-circle ms-1 text-info" data-bs-toggle="tooltip" title="Whether AI is assisting or manual mode is on."></i></th>
                    <th>Save <i class="bi bi-info-circle ms-1 text-info" data-bs-toggle="tooltip" title="Click to store your custom target."></i></th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>South PV Field</td>
                    <td>210.00 BGN</td>
                    <td><input type="number" step="0.01" name="UserSellTargets[0]" class="form-control form-control-sm neon-input" value="210.00" /></td>
                    <td>190.00 BGN</td>
                    <td><input type="number" step="0.01" name="UserStopTargets[0]" class="form-control form-control-sm neon-input" value="190.00" /></td>
                    <td><span class="badge bg-info">Using AI</span></td>
                    <td><button type="submit" class="btn btn-outline-success btn-sm">ðŸ“€</button></td>
                </tr>
                </tbody>
            </table>
        </div>
    </form>
</div>

<div class="modal fade" id="priceModal" tabindex="-1" aria-labelledby="priceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content dark-modal text-light">
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title" id="priceModalLabel">Assign Price</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p class="fs-5 mb-4">You clicked on price: <strong id="clickedPriceText" class="text-info">---</strong> BGN</p>
                <button id="setTargetBtn" type="button" class="btn btn-glow-green me-2">ðŸŽ¯ Set as Target Sell</button>
                <button id="setStopBtn" type="button" class="btn btn-glow-red">ðŸš© Set as Stop Price</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => new bootstrap.Tooltip(el));

        let clickedPrice = null;
        const ibexCtx = document.getElementById('ibexPriceChart');
        const targetInput = document.querySelector("input[name='UserSellTargets[0]']");
        const stopInput = document.querySelector("input[name='UserStopTargets[0]']");
        const priceModal = new bootstrap.Modal(document.getElementById('priceModal'));
        const clickedPriceText = document.getElementById("clickedPriceText");

        document.getElementById("setTargetBtn").addEventListener("click", () => {
            if (clickedPrice && targetInput) {
                targetInput.value = clickedPrice.toFixed(2);
                targetInput.classList.add("border-success", "fw-bold");
                priceModal.hide();
            }
        });

        document.getElementById("setStopBtn").addEventListener("click", () => {
            if (clickedPrice && stopInput) {
                stopInput.value = clickedPrice.toFixed(2);
                stopInput.classList.add("border-danger", "fw-bold");
                priceModal.hide();
            }
        });

        new Chart(ibexCtx, {
            type: 'line',
            data: {
                labels: [...Array(24).keys()].map(h => `${h.toString().padStart(2, '0')}:00`),
                datasets: [{
                    label: 'IBEX Spot Price (BGN/MWh)',
                    data: [194.2, 191.1, 187.3, 185.8, 188.0, 193.2, 206.5, 218.3, 225.7, 229.1, 222.8, 215.0, 210.4, 208.6, 206.3, 203.9, 198.5, 193.7, 189.2, 185.4, 183.6, 182.1, 180.9, 179.5],
                    fill: true,
                    tension: 0.3,
                    borderColor: 'rgba(0, 188, 255, 1)',
                    backgroundColor: 'rgba(0, 188, 255, 0.2)',
                    pointRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                onClick: (evt, elements) => {
                    if (elements.length > 0) {
                        const index = elements[0].index;
                        clickedPrice = evt.chart.data.datasets[0].data[index];
                        clickedPriceText.innerText = clickedPrice.toFixed(2);
                        priceModal.show();
                    }
                },
                scales: {
                    y: {
                        ticks: { color: "#ccc" },
                        title: { display: true, text: 'Price (BGN/MWh)', color: "#ccc" }
                    },
                    x: {
                        ticks: { color: "#ccc" },
                        title: { display: true, text: 'Hour', color: "#ccc" }
                    }
                },
                plugins: {
                    legend: { labels: { color: "#ccc" } },
                    tooltip: {
                        callbacks: {
                            label: ctx => `${ctx.parsed.y} BGN/MWh`
                        }
                    }
                }
            }
        });
    </script>
}
